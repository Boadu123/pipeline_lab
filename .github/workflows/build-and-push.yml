# Name of your GitHub Actions Workflow
name: Build, Push, and Prepare for Deploy

on:
  push:
    branches:
      - "main"
env:
  AWS_REGION: eu-central-1

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Build with Maven
        run: mvn clean package -DskipTests

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: 'arn:aws:iam::771826808190:role/YourGitHubOidcRoleName'
          aws-region: 'eu-central-1'

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build Docker Image (BUT DON'T PUSH YET)
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: 'my-project-app'
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          echo "image_uri=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Create and Upload Deployment Package (WITH ACTUAL IMAGE URI)
        run: |
          # Get AWS resource info from CloudFormation
          EXECUTION_ROLE_ARN=$(aws cloudformation describe-stacks --stack-name benedictPipeline-stack --query "Stacks[0].Outputs[?OutputKey=='TaskExecutionRoleArn'].OutputValue" --output text)
          LOG_GROUP=$(aws cloudformation describe-stacks --stack-name benedictPipeline-stack --query "Stacks[0].Outputs[?OutputKey=='LogGroupName'].OutputValue" --output text)
          ARTIFACT_BUCKET=$(aws cloudformation describe-stacks --stack-name benedictPipeline-stack --query "Stacks[0].Outputs[?OutputKey=='ArtifactBucketName'].OutputValue" --output text)

          # Create taskdef.json WITH ACTUAL IMAGE URI (not placeholder)
          sed -e "s|%IMAGE_URI%|${{ steps.build-image.outputs.image_uri }}|g" \
              -e "s|%EXECUTION_ROLE_ARN%|$EXECUTION_ROLE_ARN|g" \
              -e "s|%LOG_GROUP%|$LOG_GROUP|g" \
              -e "s|%AWS_REGION%|${{ env.AWS_REGION }}|g" \
              taskdef.template.json > taskdef.json

          # Verify the file was created correctly
          echo "--- Generated taskdef.json content: ---"
          cat taskdef.json
          echo "-------------------------------------"

          if grep -q "%IMAGE_URI%" taskdef.json; then
            echo "Error: Placeholder %IMAGE_URI% was not replaced."
            exit 1
          fi

          # Upload to S3 with COMPLETE deployment package
          zip deployment_package.zip appspec.yaml taskdef.json
          aws s3 cp deployment_package.zip s3://$ARTIFACT_BUCKET/deployment_package.zip

      - name: Push Docker Image to ECR (TRIGGERS PIPELINE)
        run: |
          # Now push the image we built earlier
          docker push ${{ steps.build-image.outputs.image_uri }}
