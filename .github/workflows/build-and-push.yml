name: Build, Push, and Deploy

on:
  push:
    branches:
      - "main"

env:
  AWS_REGION: eu-central-1
  STACK_NAME: benedictPipeline-stack

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Build with Maven
        run: mvn clean package -DskipTests

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: 'arn:aws:iam::771826808190:role/YourGitHubOidcRoleName'
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build Docker Image
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: 'my-project-app'
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "image_uri=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "image_uri_latest=$ECR_REGISTRY/$ECR_REPOSITORY:latest" >> $GITHUB_OUTPUT

      - name: Get CloudFormation Stack Outputs
        id: stack-outputs
        run: |
          # Get all stack outputs
          OUTPUTS=$(aws cloudformation describe-stacks --stack-name ${{ env.STACK_NAME }} --query "Stacks[0].Outputs[].[OutputKey,OutputValue]" --output text)
          
          # Parse each output and set as environment variable
          while read -r key value; do
            echo "$key=$value" >> $GITHUB_ENV
            echo "FOUND: $key = $value"
          done <<< "$OUTPUTS"
          
          # Verify required outputs exist
          REQUIRED_OUTPUTS=("TaskExecutionRoleArn" "TaskRoleArn" "LogGroupName" "ArtifactBucketName" "DBHost" "DBSecretArn" "S3BucketName" "CloudFrontDomain")
          for output in "${REQUIRED_OUTPUTS[@]}"; do
            if [ -z "${!output}" ]; then
              echo "ERROR: Missing required output: $output"
              exit 1
            fi
          done

      - name: Create Deployment Package
        run: |
          # Create dynamic appspec.yaml
          cat > appspec.yaml << EOF
          version: 0.0
          Resources:
            - TargetService:
                Type: AWS::ECS::Service
                Properties:
                  TaskDefinition: "<TASK_DEFINITION>"
                  LoadBalancerInfo:
                    ContainerName: "project-app"
                    ContainerPort: 8080
          EOF

          # Replace placeholders in taskdef.json
          sed -i \
            -e "s|%IMAGE_URI%|${{ steps.build-image.outputs.image_uri }}|g" \
            -e "s|%EXECUTION_ROLE_ARN%|${{ env.TaskExecutionRoleArn }}|g" \
            -e "s|%TASK_ROLE_ARN%|${{ env.TaskRoleArn }}|g" \
            -e "s|%LOG_GROUP%|${{ env.LogGroupName }}|g" \
            -e "s|%AWS_REGION%|${{ env.AWS_REGION }}|g" \
            -e "s|%DB_HOST%|${{ env.DBHost }}|g" \
            -e "s|%DB_PORT%|5432|g" \
            -e "s|%DB_NAME%|postgres|g" \
            -e "s|%DB_SECRET_ARN%|${{ env.DBSecretArn }}|g" \
            -e "s|%S3_BUCKET_NAME%|${{ env.S3BucketName }}|g" \
            -e "s|%CLOUDFRONT_DOMAIN%|${{ env.CloudFrontDomain }}|g" \
            taskdef.json

          # Verify files
          echo "=== appspec.yaml ==="
          cat appspec.yaml
          echo "=== taskdef.json ==="
          cat taskdef.json
          echo "===================="

          # Check for unreplaced placeholders
          if grep -q "%" taskdef.json; then
            echo "ERROR: Unreplaced placeholders found in taskdef.json"
            grep "%" taskdef.json
            exit 1
          fi

      - name: Upload Deployment Package to S3
        run: |
          # Create deployment package
          zip deployment_package.zip appspec.yaml taskdef.json
          
          # Upload to S3
          aws s3 cp deployment_package.zip s3://${{ env.ArtifactBucketName }}/deployment_package.zip
          
          echo "Deployment package uploaded to S3"

      - name: Push Docker Images to ECR
        run: |
          # Push both SHA and latest tags
          docker push ${{ steps.build-image.outputs.image_uri }}
          docker push ${{ steps.build-image.outputs.image_uri_latest }}
          
          echo "Images pushed to ECR:"
          echo "- ${{ steps.build-image.outputs.image_uri }}"
          echo "- ${{ steps.build-image.outputs.image_uri_latest }}"